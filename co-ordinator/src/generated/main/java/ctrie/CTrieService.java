// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_trie.proto

package ctrie;

/**
 * Protobuf service {@code ctrie.CTrieService}
 */
public  abstract class CTrieService
    implements com.google.protobuf.Service {
  protected CTrieService() {}

  public interface Interface {
    /**
     * <code>rpc Size(.ctrie.SizeRequest) returns (.ctrie.SizeResponse);</code>
     */
    public abstract void size(
        com.google.protobuf.RpcController controller,
        ctrie.SizeRequest request,
        com.google.protobuf.RpcCallback<ctrie.SizeResponse> done);

    /**
     * <code>rpc IsEmpty(.ctrie.IsEmptyRequest) returns (.ctrie.IsEmptyResponse);</code>
     */
    public abstract void isEmpty(
        com.google.protobuf.RpcController controller,
        ctrie.IsEmptyRequest request,
        com.google.protobuf.RpcCallback<ctrie.IsEmptyResponse> done);

    /**
     * <code>rpc ContainsKey(.ctrie.ContainsKeyRequest) returns (.ctrie.ContainsKeyResponse);</code>
     */
    public abstract void containsKey(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsKeyRequest request,
        com.google.protobuf.RpcCallback<ctrie.ContainsKeyResponse> done);

    /**
     * <code>rpc ContainsValue(.ctrie.ContainsValueRequest) returns (.ctrie.ContainsValueResponse);</code>
     */
    public abstract void containsValue(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsValueRequest request,
        com.google.protobuf.RpcCallback<ctrie.ContainsValueResponse> done);

    /**
     * <code>rpc Get(.ctrie.GetRequest) returns (.ctrie.GetResponse);</code>
     */
    public abstract void get(
        com.google.protobuf.RpcController controller,
        ctrie.GetRequest request,
        com.google.protobuf.RpcCallback<ctrie.GetResponse> done);

    /**
     * <code>rpc Put(.ctrie.PutRequest) returns (.ctrie.PutResponse);</code>
     */
    public abstract void put(
        com.google.protobuf.RpcController controller,
        ctrie.PutRequest request,
        com.google.protobuf.RpcCallback<ctrie.PutResponse> done);

    /**
     * <code>rpc Remove(.ctrie.RemoveRequest) returns (.ctrie.RemoveResponse);</code>
     */
    public abstract void remove(
        com.google.protobuf.RpcController controller,
        ctrie.RemoveRequest request,
        com.google.protobuf.RpcCallback<ctrie.RemoveResponse> done);

    /**
     * <code>rpc PutAll(.ctrie.PutAllRequest) returns (.ctrie.PutAllResponse);</code>
     */
    public abstract void putAll(
        com.google.protobuf.RpcController controller,
        ctrie.PutAllRequest request,
        com.google.protobuf.RpcCallback<ctrie.PutAllResponse> done);

    /**
     * <code>rpc Clear(.ctrie.ClearRequest) returns (.ctrie.ClearResponse);</code>
     */
    public abstract void clear(
        com.google.protobuf.RpcController controller,
        ctrie.ClearRequest request,
        com.google.protobuf.RpcCallback<ctrie.ClearResponse> done);

    /**
     * <code>rpc KeySet(.ctrie.KeySetRequest) returns (.ctrie.KeySetResponse);</code>
     */
    public abstract void keySet(
        com.google.protobuf.RpcController controller,
        ctrie.KeySetRequest request,
        com.google.protobuf.RpcCallback<ctrie.KeySetResponse> done);

    /**
     * <code>rpc Values(.ctrie.ValuesRequest) returns (.ctrie.ValuesResponse);</code>
     */
    public abstract void values(
        com.google.protobuf.RpcController controller,
        ctrie.ValuesRequest request,
        com.google.protobuf.RpcCallback<ctrie.ValuesResponse> done);

    /**
     * <code>rpc EntrySet(.ctrie.EntrySetRequest) returns (.ctrie.EntrySetResponse);</code>
     */
    public abstract void entrySet(
        com.google.protobuf.RpcController controller,
        ctrie.EntrySetRequest request,
        com.google.protobuf.RpcCallback<ctrie.EntrySetResponse> done);

    /**
     * <code>rpc Snapshot(.ctrie.SnapshotRequest) returns (.ctrie.SnapshotResponse);</code>
     */
    public abstract void snapshot(
        com.google.protobuf.RpcController controller,
        ctrie.SnapshotRequest request,
        com.google.protobuf.RpcCallback<ctrie.SnapshotResponse> done);

    /**
     * <code>rpc GetNextNPaths(.ctrie.GetNextNPathsRequest) returns (.ctrie.GetNextNPathsResponse);</code>
     */
    public abstract void getNextNPaths(
        com.google.protobuf.RpcController controller,
        ctrie.GetNextNPathsRequest request,
        com.google.protobuf.RpcCallback<ctrie.GetNextNPathsResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new CTrieService() {
      @java.lang.Override
      public  void size(
          com.google.protobuf.RpcController controller,
          ctrie.SizeRequest request,
          com.google.protobuf.RpcCallback<ctrie.SizeResponse> done) {
        impl.size(controller, request, done);
      }

      @java.lang.Override
      public  void isEmpty(
          com.google.protobuf.RpcController controller,
          ctrie.IsEmptyRequest request,
          com.google.protobuf.RpcCallback<ctrie.IsEmptyResponse> done) {
        impl.isEmpty(controller, request, done);
      }

      @java.lang.Override
      public  void containsKey(
          com.google.protobuf.RpcController controller,
          ctrie.ContainsKeyRequest request,
          com.google.protobuf.RpcCallback<ctrie.ContainsKeyResponse> done) {
        impl.containsKey(controller, request, done);
      }

      @java.lang.Override
      public  void containsValue(
          com.google.protobuf.RpcController controller,
          ctrie.ContainsValueRequest request,
          com.google.protobuf.RpcCallback<ctrie.ContainsValueResponse> done) {
        impl.containsValue(controller, request, done);
      }

      @java.lang.Override
      public  void get(
          com.google.protobuf.RpcController controller,
          ctrie.GetRequest request,
          com.google.protobuf.RpcCallback<ctrie.GetResponse> done) {
        impl.get(controller, request, done);
      }

      @java.lang.Override
      public  void put(
          com.google.protobuf.RpcController controller,
          ctrie.PutRequest request,
          com.google.protobuf.RpcCallback<ctrie.PutResponse> done) {
        impl.put(controller, request, done);
      }

      @java.lang.Override
      public  void remove(
          com.google.protobuf.RpcController controller,
          ctrie.RemoveRequest request,
          com.google.protobuf.RpcCallback<ctrie.RemoveResponse> done) {
        impl.remove(controller, request, done);
      }

      @java.lang.Override
      public  void putAll(
          com.google.protobuf.RpcController controller,
          ctrie.PutAllRequest request,
          com.google.protobuf.RpcCallback<ctrie.PutAllResponse> done) {
        impl.putAll(controller, request, done);
      }

      @java.lang.Override
      public  void clear(
          com.google.protobuf.RpcController controller,
          ctrie.ClearRequest request,
          com.google.protobuf.RpcCallback<ctrie.ClearResponse> done) {
        impl.clear(controller, request, done);
      }

      @java.lang.Override
      public  void keySet(
          com.google.protobuf.RpcController controller,
          ctrie.KeySetRequest request,
          com.google.protobuf.RpcCallback<ctrie.KeySetResponse> done) {
        impl.keySet(controller, request, done);
      }

      @java.lang.Override
      public  void values(
          com.google.protobuf.RpcController controller,
          ctrie.ValuesRequest request,
          com.google.protobuf.RpcCallback<ctrie.ValuesResponse> done) {
        impl.values(controller, request, done);
      }

      @java.lang.Override
      public  void entrySet(
          com.google.protobuf.RpcController controller,
          ctrie.EntrySetRequest request,
          com.google.protobuf.RpcCallback<ctrie.EntrySetResponse> done) {
        impl.entrySet(controller, request, done);
      }

      @java.lang.Override
      public  void snapshot(
          com.google.protobuf.RpcController controller,
          ctrie.SnapshotRequest request,
          com.google.protobuf.RpcCallback<ctrie.SnapshotResponse> done) {
        impl.snapshot(controller, request, done);
      }

      @java.lang.Override
      public  void getNextNPaths(
          com.google.protobuf.RpcController controller,
          ctrie.GetNextNPathsRequest request,
          com.google.protobuf.RpcCallback<ctrie.GetNextNPathsResponse> done) {
        impl.getNextNPaths(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.size(controller, (ctrie.SizeRequest)request);
          case 1:
            return impl.isEmpty(controller, (ctrie.IsEmptyRequest)request);
          case 2:
            return impl.containsKey(controller, (ctrie.ContainsKeyRequest)request);
          case 3:
            return impl.containsValue(controller, (ctrie.ContainsValueRequest)request);
          case 4:
            return impl.get(controller, (ctrie.GetRequest)request);
          case 5:
            return impl.put(controller, (ctrie.PutRequest)request);
          case 6:
            return impl.remove(controller, (ctrie.RemoveRequest)request);
          case 7:
            return impl.putAll(controller, (ctrie.PutAllRequest)request);
          case 8:
            return impl.clear(controller, (ctrie.ClearRequest)request);
          case 9:
            return impl.keySet(controller, (ctrie.KeySetRequest)request);
          case 10:
            return impl.values(controller, (ctrie.ValuesRequest)request);
          case 11:
            return impl.entrySet(controller, (ctrie.EntrySetRequest)request);
          case 12:
            return impl.snapshot(controller, (ctrie.SnapshotRequest)request);
          case 13:
            return impl.getNextNPaths(controller, (ctrie.GetNextNPathsRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return ctrie.SizeRequest.getDefaultInstance();
          case 1:
            return ctrie.IsEmptyRequest.getDefaultInstance();
          case 2:
            return ctrie.ContainsKeyRequest.getDefaultInstance();
          case 3:
            return ctrie.ContainsValueRequest.getDefaultInstance();
          case 4:
            return ctrie.GetRequest.getDefaultInstance();
          case 5:
            return ctrie.PutRequest.getDefaultInstance();
          case 6:
            return ctrie.RemoveRequest.getDefaultInstance();
          case 7:
            return ctrie.PutAllRequest.getDefaultInstance();
          case 8:
            return ctrie.ClearRequest.getDefaultInstance();
          case 9:
            return ctrie.KeySetRequest.getDefaultInstance();
          case 10:
            return ctrie.ValuesRequest.getDefaultInstance();
          case 11:
            return ctrie.EntrySetRequest.getDefaultInstance();
          case 12:
            return ctrie.SnapshotRequest.getDefaultInstance();
          case 13:
            return ctrie.GetNextNPathsRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return ctrie.SizeResponse.getDefaultInstance();
          case 1:
            return ctrie.IsEmptyResponse.getDefaultInstance();
          case 2:
            return ctrie.ContainsKeyResponse.getDefaultInstance();
          case 3:
            return ctrie.ContainsValueResponse.getDefaultInstance();
          case 4:
            return ctrie.GetResponse.getDefaultInstance();
          case 5:
            return ctrie.PutResponse.getDefaultInstance();
          case 6:
            return ctrie.RemoveResponse.getDefaultInstance();
          case 7:
            return ctrie.PutAllResponse.getDefaultInstance();
          case 8:
            return ctrie.ClearResponse.getDefaultInstance();
          case 9:
            return ctrie.KeySetResponse.getDefaultInstance();
          case 10:
            return ctrie.ValuesResponse.getDefaultInstance();
          case 11:
            return ctrie.EntrySetResponse.getDefaultInstance();
          case 12:
            return ctrie.SnapshotResponse.getDefaultInstance();
          case 13:
            return ctrie.GetNextNPathsResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc Size(.ctrie.SizeRequest) returns (.ctrie.SizeResponse);</code>
   */
  public abstract void size(
      com.google.protobuf.RpcController controller,
      ctrie.SizeRequest request,
      com.google.protobuf.RpcCallback<ctrie.SizeResponse> done);

  /**
   * <code>rpc IsEmpty(.ctrie.IsEmptyRequest) returns (.ctrie.IsEmptyResponse);</code>
   */
  public abstract void isEmpty(
      com.google.protobuf.RpcController controller,
      ctrie.IsEmptyRequest request,
      com.google.protobuf.RpcCallback<ctrie.IsEmptyResponse> done);

  /**
   * <code>rpc ContainsKey(.ctrie.ContainsKeyRequest) returns (.ctrie.ContainsKeyResponse);</code>
   */
  public abstract void containsKey(
      com.google.protobuf.RpcController controller,
      ctrie.ContainsKeyRequest request,
      com.google.protobuf.RpcCallback<ctrie.ContainsKeyResponse> done);

  /**
   * <code>rpc ContainsValue(.ctrie.ContainsValueRequest) returns (.ctrie.ContainsValueResponse);</code>
   */
  public abstract void containsValue(
      com.google.protobuf.RpcController controller,
      ctrie.ContainsValueRequest request,
      com.google.protobuf.RpcCallback<ctrie.ContainsValueResponse> done);

  /**
   * <code>rpc Get(.ctrie.GetRequest) returns (.ctrie.GetResponse);</code>
   */
  public abstract void get(
      com.google.protobuf.RpcController controller,
      ctrie.GetRequest request,
      com.google.protobuf.RpcCallback<ctrie.GetResponse> done);

  /**
   * <code>rpc Put(.ctrie.PutRequest) returns (.ctrie.PutResponse);</code>
   */
  public abstract void put(
      com.google.protobuf.RpcController controller,
      ctrie.PutRequest request,
      com.google.protobuf.RpcCallback<ctrie.PutResponse> done);

  /**
   * <code>rpc Remove(.ctrie.RemoveRequest) returns (.ctrie.RemoveResponse);</code>
   */
  public abstract void remove(
      com.google.protobuf.RpcController controller,
      ctrie.RemoveRequest request,
      com.google.protobuf.RpcCallback<ctrie.RemoveResponse> done);

  /**
   * <code>rpc PutAll(.ctrie.PutAllRequest) returns (.ctrie.PutAllResponse);</code>
   */
  public abstract void putAll(
      com.google.protobuf.RpcController controller,
      ctrie.PutAllRequest request,
      com.google.protobuf.RpcCallback<ctrie.PutAllResponse> done);

  /**
   * <code>rpc Clear(.ctrie.ClearRequest) returns (.ctrie.ClearResponse);</code>
   */
  public abstract void clear(
      com.google.protobuf.RpcController controller,
      ctrie.ClearRequest request,
      com.google.protobuf.RpcCallback<ctrie.ClearResponse> done);

  /**
   * <code>rpc KeySet(.ctrie.KeySetRequest) returns (.ctrie.KeySetResponse);</code>
   */
  public abstract void keySet(
      com.google.protobuf.RpcController controller,
      ctrie.KeySetRequest request,
      com.google.protobuf.RpcCallback<ctrie.KeySetResponse> done);

  /**
   * <code>rpc Values(.ctrie.ValuesRequest) returns (.ctrie.ValuesResponse);</code>
   */
  public abstract void values(
      com.google.protobuf.RpcController controller,
      ctrie.ValuesRequest request,
      com.google.protobuf.RpcCallback<ctrie.ValuesResponse> done);

  /**
   * <code>rpc EntrySet(.ctrie.EntrySetRequest) returns (.ctrie.EntrySetResponse);</code>
   */
  public abstract void entrySet(
      com.google.protobuf.RpcController controller,
      ctrie.EntrySetRequest request,
      com.google.protobuf.RpcCallback<ctrie.EntrySetResponse> done);

  /**
   * <code>rpc Snapshot(.ctrie.SnapshotRequest) returns (.ctrie.SnapshotResponse);</code>
   */
  public abstract void snapshot(
      com.google.protobuf.RpcController controller,
      ctrie.SnapshotRequest request,
      com.google.protobuf.RpcCallback<ctrie.SnapshotResponse> done);

  /**
   * <code>rpc GetNextNPaths(.ctrie.GetNextNPathsRequest) returns (.ctrie.GetNextNPathsResponse);</code>
   */
  public abstract void getNextNPaths(
      com.google.protobuf.RpcController controller,
      ctrie.GetNextNPathsRequest request,
      com.google.protobuf.RpcCallback<ctrie.GetNextNPathsResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return ctrie.CTrieProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.size(controller, (ctrie.SizeRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.SizeResponse>specializeCallback(
            done));
        return;
      case 1:
        this.isEmpty(controller, (ctrie.IsEmptyRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.IsEmptyResponse>specializeCallback(
            done));
        return;
      case 2:
        this.containsKey(controller, (ctrie.ContainsKeyRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.ContainsKeyResponse>specializeCallback(
            done));
        return;
      case 3:
        this.containsValue(controller, (ctrie.ContainsValueRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.ContainsValueResponse>specializeCallback(
            done));
        return;
      case 4:
        this.get(controller, (ctrie.GetRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.GetResponse>specializeCallback(
            done));
        return;
      case 5:
        this.put(controller, (ctrie.PutRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.PutResponse>specializeCallback(
            done));
        return;
      case 6:
        this.remove(controller, (ctrie.RemoveRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.RemoveResponse>specializeCallback(
            done));
        return;
      case 7:
        this.putAll(controller, (ctrie.PutAllRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.PutAllResponse>specializeCallback(
            done));
        return;
      case 8:
        this.clear(controller, (ctrie.ClearRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.ClearResponse>specializeCallback(
            done));
        return;
      case 9:
        this.keySet(controller, (ctrie.KeySetRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.KeySetResponse>specializeCallback(
            done));
        return;
      case 10:
        this.values(controller, (ctrie.ValuesRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.ValuesResponse>specializeCallback(
            done));
        return;
      case 11:
        this.entrySet(controller, (ctrie.EntrySetRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.EntrySetResponse>specializeCallback(
            done));
        return;
      case 12:
        this.snapshot(controller, (ctrie.SnapshotRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.SnapshotResponse>specializeCallback(
            done));
        return;
      case 13:
        this.getNextNPaths(controller, (ctrie.GetNextNPathsRequest)request,
          com.google.protobuf.RpcUtil.<ctrie.GetNextNPathsResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return ctrie.SizeRequest.getDefaultInstance();
      case 1:
        return ctrie.IsEmptyRequest.getDefaultInstance();
      case 2:
        return ctrie.ContainsKeyRequest.getDefaultInstance();
      case 3:
        return ctrie.ContainsValueRequest.getDefaultInstance();
      case 4:
        return ctrie.GetRequest.getDefaultInstance();
      case 5:
        return ctrie.PutRequest.getDefaultInstance();
      case 6:
        return ctrie.RemoveRequest.getDefaultInstance();
      case 7:
        return ctrie.PutAllRequest.getDefaultInstance();
      case 8:
        return ctrie.ClearRequest.getDefaultInstance();
      case 9:
        return ctrie.KeySetRequest.getDefaultInstance();
      case 10:
        return ctrie.ValuesRequest.getDefaultInstance();
      case 11:
        return ctrie.EntrySetRequest.getDefaultInstance();
      case 12:
        return ctrie.SnapshotRequest.getDefaultInstance();
      case 13:
        return ctrie.GetNextNPathsRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return ctrie.SizeResponse.getDefaultInstance();
      case 1:
        return ctrie.IsEmptyResponse.getDefaultInstance();
      case 2:
        return ctrie.ContainsKeyResponse.getDefaultInstance();
      case 3:
        return ctrie.ContainsValueResponse.getDefaultInstance();
      case 4:
        return ctrie.GetResponse.getDefaultInstance();
      case 5:
        return ctrie.PutResponse.getDefaultInstance();
      case 6:
        return ctrie.RemoveResponse.getDefaultInstance();
      case 7:
        return ctrie.PutAllResponse.getDefaultInstance();
      case 8:
        return ctrie.ClearResponse.getDefaultInstance();
      case 9:
        return ctrie.KeySetResponse.getDefaultInstance();
      case 10:
        return ctrie.ValuesResponse.getDefaultInstance();
      case 11:
        return ctrie.EntrySetResponse.getDefaultInstance();
      case 12:
        return ctrie.SnapshotResponse.getDefaultInstance();
      case 13:
        return ctrie.GetNextNPathsResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends ctrie.CTrieService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void size(
        com.google.protobuf.RpcController controller,
        ctrie.SizeRequest request,
        com.google.protobuf.RpcCallback<ctrie.SizeResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        ctrie.SizeResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.SizeResponse.class,
          ctrie.SizeResponse.getDefaultInstance()));
    }

    public  void isEmpty(
        com.google.protobuf.RpcController controller,
        ctrie.IsEmptyRequest request,
        com.google.protobuf.RpcCallback<ctrie.IsEmptyResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        ctrie.IsEmptyResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.IsEmptyResponse.class,
          ctrie.IsEmptyResponse.getDefaultInstance()));
    }

    public  void containsKey(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsKeyRequest request,
        com.google.protobuf.RpcCallback<ctrie.ContainsKeyResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        ctrie.ContainsKeyResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.ContainsKeyResponse.class,
          ctrie.ContainsKeyResponse.getDefaultInstance()));
    }

    public  void containsValue(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsValueRequest request,
        com.google.protobuf.RpcCallback<ctrie.ContainsValueResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        ctrie.ContainsValueResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.ContainsValueResponse.class,
          ctrie.ContainsValueResponse.getDefaultInstance()));
    }

    public  void get(
        com.google.protobuf.RpcController controller,
        ctrie.GetRequest request,
        com.google.protobuf.RpcCallback<ctrie.GetResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        ctrie.GetResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.GetResponse.class,
          ctrie.GetResponse.getDefaultInstance()));
    }

    public  void put(
        com.google.protobuf.RpcController controller,
        ctrie.PutRequest request,
        com.google.protobuf.RpcCallback<ctrie.PutResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        ctrie.PutResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.PutResponse.class,
          ctrie.PutResponse.getDefaultInstance()));
    }

    public  void remove(
        com.google.protobuf.RpcController controller,
        ctrie.RemoveRequest request,
        com.google.protobuf.RpcCallback<ctrie.RemoveResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        ctrie.RemoveResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.RemoveResponse.class,
          ctrie.RemoveResponse.getDefaultInstance()));
    }

    public  void putAll(
        com.google.protobuf.RpcController controller,
        ctrie.PutAllRequest request,
        com.google.protobuf.RpcCallback<ctrie.PutAllResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        ctrie.PutAllResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.PutAllResponse.class,
          ctrie.PutAllResponse.getDefaultInstance()));
    }

    public  void clear(
        com.google.protobuf.RpcController controller,
        ctrie.ClearRequest request,
        com.google.protobuf.RpcCallback<ctrie.ClearResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        ctrie.ClearResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.ClearResponse.class,
          ctrie.ClearResponse.getDefaultInstance()));
    }

    public  void keySet(
        com.google.protobuf.RpcController controller,
        ctrie.KeySetRequest request,
        com.google.protobuf.RpcCallback<ctrie.KeySetResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(9),
        controller,
        request,
        ctrie.KeySetResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.KeySetResponse.class,
          ctrie.KeySetResponse.getDefaultInstance()));
    }

    public  void values(
        com.google.protobuf.RpcController controller,
        ctrie.ValuesRequest request,
        com.google.protobuf.RpcCallback<ctrie.ValuesResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(10),
        controller,
        request,
        ctrie.ValuesResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.ValuesResponse.class,
          ctrie.ValuesResponse.getDefaultInstance()));
    }

    public  void entrySet(
        com.google.protobuf.RpcController controller,
        ctrie.EntrySetRequest request,
        com.google.protobuf.RpcCallback<ctrie.EntrySetResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(11),
        controller,
        request,
        ctrie.EntrySetResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.EntrySetResponse.class,
          ctrie.EntrySetResponse.getDefaultInstance()));
    }

    public  void snapshot(
        com.google.protobuf.RpcController controller,
        ctrie.SnapshotRequest request,
        com.google.protobuf.RpcCallback<ctrie.SnapshotResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(12),
        controller,
        request,
        ctrie.SnapshotResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.SnapshotResponse.class,
          ctrie.SnapshotResponse.getDefaultInstance()));
    }

    public  void getNextNPaths(
        com.google.protobuf.RpcController controller,
        ctrie.GetNextNPathsRequest request,
        com.google.protobuf.RpcCallback<ctrie.GetNextNPathsResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(13),
        controller,
        request,
        ctrie.GetNextNPathsResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          ctrie.GetNextNPathsResponse.class,
          ctrie.GetNextNPathsResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public ctrie.SizeResponse size(
        com.google.protobuf.RpcController controller,
        ctrie.SizeRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.IsEmptyResponse isEmpty(
        com.google.protobuf.RpcController controller,
        ctrie.IsEmptyRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.ContainsKeyResponse containsKey(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsKeyRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.ContainsValueResponse containsValue(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsValueRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.GetResponse get(
        com.google.protobuf.RpcController controller,
        ctrie.GetRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.PutResponse put(
        com.google.protobuf.RpcController controller,
        ctrie.PutRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.RemoveResponse remove(
        com.google.protobuf.RpcController controller,
        ctrie.RemoveRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.PutAllResponse putAll(
        com.google.protobuf.RpcController controller,
        ctrie.PutAllRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.ClearResponse clear(
        com.google.protobuf.RpcController controller,
        ctrie.ClearRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.KeySetResponse keySet(
        com.google.protobuf.RpcController controller,
        ctrie.KeySetRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.ValuesResponse values(
        com.google.protobuf.RpcController controller,
        ctrie.ValuesRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.EntrySetResponse entrySet(
        com.google.protobuf.RpcController controller,
        ctrie.EntrySetRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.SnapshotResponse snapshot(
        com.google.protobuf.RpcController controller,
        ctrie.SnapshotRequest request)
        throws com.google.protobuf.ServiceException;

    public ctrie.GetNextNPathsResponse getNextNPaths(
        com.google.protobuf.RpcController controller,
        ctrie.GetNextNPathsRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public ctrie.SizeResponse size(
        com.google.protobuf.RpcController controller,
        ctrie.SizeRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.SizeResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        ctrie.SizeResponse.getDefaultInstance());
    }


    public ctrie.IsEmptyResponse isEmpty(
        com.google.protobuf.RpcController controller,
        ctrie.IsEmptyRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.IsEmptyResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        ctrie.IsEmptyResponse.getDefaultInstance());
    }


    public ctrie.ContainsKeyResponse containsKey(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsKeyRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.ContainsKeyResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        ctrie.ContainsKeyResponse.getDefaultInstance());
    }


    public ctrie.ContainsValueResponse containsValue(
        com.google.protobuf.RpcController controller,
        ctrie.ContainsValueRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.ContainsValueResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        ctrie.ContainsValueResponse.getDefaultInstance());
    }


    public ctrie.GetResponse get(
        com.google.protobuf.RpcController controller,
        ctrie.GetRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.GetResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        ctrie.GetResponse.getDefaultInstance());
    }


    public ctrie.PutResponse put(
        com.google.protobuf.RpcController controller,
        ctrie.PutRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.PutResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        ctrie.PutResponse.getDefaultInstance());
    }


    public ctrie.RemoveResponse remove(
        com.google.protobuf.RpcController controller,
        ctrie.RemoveRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.RemoveResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        ctrie.RemoveResponse.getDefaultInstance());
    }


    public ctrie.PutAllResponse putAll(
        com.google.protobuf.RpcController controller,
        ctrie.PutAllRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.PutAllResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        ctrie.PutAllResponse.getDefaultInstance());
    }


    public ctrie.ClearResponse clear(
        com.google.protobuf.RpcController controller,
        ctrie.ClearRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.ClearResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        ctrie.ClearResponse.getDefaultInstance());
    }


    public ctrie.KeySetResponse keySet(
        com.google.protobuf.RpcController controller,
        ctrie.KeySetRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.KeySetResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(9),
        controller,
        request,
        ctrie.KeySetResponse.getDefaultInstance());
    }


    public ctrie.ValuesResponse values(
        com.google.protobuf.RpcController controller,
        ctrie.ValuesRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.ValuesResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(10),
        controller,
        request,
        ctrie.ValuesResponse.getDefaultInstance());
    }


    public ctrie.EntrySetResponse entrySet(
        com.google.protobuf.RpcController controller,
        ctrie.EntrySetRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.EntrySetResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(11),
        controller,
        request,
        ctrie.EntrySetResponse.getDefaultInstance());
    }


    public ctrie.SnapshotResponse snapshot(
        com.google.protobuf.RpcController controller,
        ctrie.SnapshotRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.SnapshotResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(12),
        controller,
        request,
        ctrie.SnapshotResponse.getDefaultInstance());
    }


    public ctrie.GetNextNPathsResponse getNextNPaths(
        com.google.protobuf.RpcController controller,
        ctrie.GetNextNPathsRequest request)
        throws com.google.protobuf.ServiceException {
      return (ctrie.GetNextNPathsResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(13),
        controller,
        request,
        ctrie.GetNextNPathsResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:ctrie.CTrieService)
}

